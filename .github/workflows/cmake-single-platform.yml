# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  Build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up the libraries
      working-directory: ${{github.workspace}}
      shell: bash
      run:  |
        sudo apt install binutils-dev libdwarf-dev libdwarf-dev cmake
    - name: Install GCC-13
      shell:  bash
      run:  |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt update && sudo apt-get install gcc-13 g++-13
        sudo update-alternatives --install `which gcc` gcc `which gcc-13` 99
        sudo update-alternatives --install `which g++` g++ `which g++-13` 99
        
    - name: 'Verifying installed g++ version'
      shell:  bash
      run: |
          g++ --version
          
    - name: Install Boost
      shell:  bash
      working-directory: /tmp/
      run: |
        wget  https://boostorg.jfrog.io/artifactory/main/release/1.85.0/source/boost_1_85_0.tar.gz
        tar -zxvf boost_1_85_0.tar.gz && cd boost_1_85_0
        ./bootstrap.sh
        ./b2
        sudo ./b2 install
        sudo ldconfig -v | grep boost
    
    ########################################
    #              Building                #
    ########################################
    - name: Init submodule
      shell: bash
      working-directory: ${{github.workspace}}
      run:  |
        git submodule init && git submodule update
        
    - name: Build the project
      # Build your program with the given configuration
      working-directory: ${{github.workspace}}
      shell: bash
      run:  |
        ${{github.workspace}}/build.sh
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: packing-tests
        path: |
          build/test/
          !build/test/CMakeFiles/*
          !build/test/cmake_install.cmake
          !build/test/Makefile



    ########################################
    #               Testing               #
    ########################################
  Test-queue:
    runs-on: ubuntu-latest
    needs: Build
    steps:
    - name: mkdir
      working-directory: ${{github.workspace}}
      shell: bash
      run:  |
        mkdir build/test/ -p

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: packing-tests
        path: build/test/

    - name: Display structure of downloaded files
      shell: bash
      run: ls -R build/test/
      
    - uses: actions/checkout@v4
    - name: Test-queue
      working-directory: build/test
      shell: bash
      run:  |
        ls -al
        ./queue_test

  Test-function:
    runs-on: ubuntu-latest
    needs: Build
    steps:
    - name: mkdir
      working-directory: ${{github.workspace}}
      shell: bash
      run:  |
        mkdir build/test/ -p

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: packing-tests
        path: build/test/

    - uses: actions/checkout@v4
    - name: Test-function
      working-directory: build/test
      shell: bash
      run:  |
        ./function_test

  Test-combine_unit:
    runs-on: ubuntu-latest
    needs: Build
    steps:
    - name: mkdir
      working-directory: ${{github.workspace}}
      shell: bash
      run:  |
        mkdir build/test/ -p  

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: packing-tests
        path: build/test/

    - uses: actions/checkout@v4       
    - name: Test-combine_unit
      working-directory: build/test
      shell: bash
      run:  |
        ./combine_unit_test 

  Test-threadpool:
    runs-on: ubuntu-latest
    needs: Build
    steps:
    - name: mkdir
      working-directory: ${{github.workspace}}
      shell: bash
      run:  |
        mkdir build/test/ -p

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: packing-tests
        path: build/test/

    - uses: actions/checkout@v4   
    - name: Test-threadpool
      working-directory: build/test
      shell: bash
      run:  |
        ./threadpool_test